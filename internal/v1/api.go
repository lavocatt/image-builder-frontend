// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8      Distributions = "centos-8"
	Centos9      Distributions = "centos-9"
	Fedora37     Distributions = "fedora-37"
	Fedora38     Distributions = "fedora-38"
	Fedora39     Distributions = "fedora-39"
	Rhel8        Distributions = "rhel-8"
	Rhel84       Distributions = "rhel-84"
	Rhel85       Distributions = "rhel-85"
	Rhel86       Distributions = "rhel-86"
	Rhel87       Distributions = "rhel-87"
	Rhel88       Distributions = "rhel-88"
	Rhel8Nightly Distributions = "rhel-8-nightly"
	Rhel9        Distributions = "rhel-9"
	Rhel90       Distributions = "rhel-90"
	Rhel91       Distributions = "rhel-91"
	Rhel92       Distributions = "rhel-92"
	Rhel9Nightly Distributions = "rhel-9-nightly"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
	ImageTypesWsl               ImageTypes = "wsl"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`

	// UUID of the parent compose of the clone
	ParentComposeId openapi_types.UUID `json:"parent_compose_id"`
	Request         CloneRequest       `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations   *Customizations `json:"customizations,omitempty"`
	Distribution     Distributions   `json:"distribution"`
	ImageDescription *string         `json:"image_description,omitempty"`
	ImageName        *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   ComposeRequest     `json:"request"`
}

// Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories  *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem          *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap            *OpenSCAP           `json:"openscap,omitempty"`
	Packages            *[]string           `json:"packages,omitempty"`
	PayloadRepositories *[]Repository       `json:"payload_repositories,omitempty"`
	Subscription        *Subscription       `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture ImageRequestArchitecture `json:"architecture"`
	ImageType    ImageTypes               `json:"image_type"`
	Ostree       *OSTree                  `json:"ostree,omitempty"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size          *uint64       `json:"size,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string `json:"profile_id"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"H+fT8rXZHw+K/efWGj4VTZVYzfB39ep6Ae3HmdauLiZEtdUTfH9922oNWu1ms3KBOx10VbOpeXFV9x7Z",
	"fX8wKCkvVfXVJKuXxkXTlmeofblsXLSX8+6EtJbdy4t757rdZO1W66XdXHbaV0anfVFpNtvG/H4z++Tm",
	"pVmot15cw1qPmq8vV+Zs3TMnpHCi1z7u9MfF9KqkdN7L82799qJ1o5D+80nroWh7i9HJ+9gblZ/6tFW2",
	"y5eexd3esHPd63O72jmfkCK9/HhuOuPi2j196Tb6zXNt0G7frmfNGXOeHhr1lwevfVKYkhkdo2GpP7xt",
	"6+u7dr32dNqo4tvHCbGro5Mpuz9f1tulPrW05qAyOPec9WtxhPklfK307vuP/GTcgcUKZi+jy/bsw6nf",
	"vTQey9e386oyIcb7k9Eo3RSmdqnzMaqPG+Wnzvm0aC1mla61WBnd9x4yisWP55eVTV9Gr9fXbX3xoZ9Y",
	"N6OatzKuJmS2Klwra+u11MfTS1q7bDbXt6cPT7T5OlqOBkpHnY0by06brOajc2/9bj8tHxc3rWev031s",
	"3KLyy4QM8ENRv75pMK1+7rKLVXVw8qyRAbkfnVzR2fiud162n6jV1EhnbGovj43Z69x9Ms/XrFw4PUW3",
	"E2LOFdona2V2s5xDTy/gh8atWnteDOaz/nBwbVQfTh9762vv6Yl/LJ/JbHBTfRpetN57Ffbq2IPBhOh8",
	"Or4qnlTX0+FToVletKZwNXwq8frDx81M/UDz0WsHw/7Nab9wpV63u8Pi/UWj1iida02rc3GqTci8ZNzj",
	"l9F9E8Jr5fq6+XG1GM6H1/2+0Su93L/gq5vHdYmXr9cXOqPQri5H7adb3bxD3XW/NX69npAFdW+suynS",
	"2fi0Wh/rpdZN1zM+Xmm7+rg6H/Xmr8bQLD5eLkbde9Jef8zv17XOQ+n9zsVP1VOho8y77vMr7Tlqr9zr",
	"j04L+OP6fjy0+GzQ/G1CfrvTx/UJkdalc3P+len5gSr2dnwSa4IIfKCkAx76GL6/xPI60hwKXeoIjzbv",
	"UKMQzvu7sKy/+e9z5ZLvkkOqmr9FNeJDbsbGKdtFIsJBvM6riHCHyfX/TpHw9NBvjRzjFEE7tjIU/9Yq",
	"/i8SvxZk6HZ0BC573Q+XYodivk4P8hiz3haIYn2d5tmkBMdpgfhOgictAfS2XRU/LvrbdrZTBER4X2zN",
	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
